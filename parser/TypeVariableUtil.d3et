
server class TypeVariableUtil {

    static Boolean canTypeSubstitute(TypeVariable on, PropType type) {
        if (type is TypeVariable) {
            TypeVariable tv = (type as TypeVariable);
            if (tv.extends == null) {
                return on.extends == null;
            }
            return canTypeSubstitute(on, tv.extends);
        }
        if (on.extends == null) {
            return true;
        }
        if (PropTypeUtil.isAssignableFrom(on.extends, type)) {
            return true;
        }
        return PropTypeUtil.isAssignableFrom(on.extends, type);
    }

    static Boolean isAssignableFrom(TypeVariable on, PropType type) {
        if (type == PropTypeUtil.VOID) {
            return on == PropTypeUtil.VOID;
        }
        if (on.extends == null) {
            return true;
        }
        if (PropTypeUtil.isAssignableFromInternal(on, type)) {
            return true;
        }
        return PropTypeUtil.isAssignableFrom(on.extends, type);
    }

    static List<MethodDecl> getAllMethods(ValidationContext ctx, TypeVariable on) {
        if (on.extends != null) {
            return PropTypeUtil.getAllMethods(ctx, on.extends);
        } else {
            PropType objType = ctx.object();
            if(on != objType) {
                return PropTypeUtil.getAllMethods(ctx, objType);
            }
        }
        return List();
    }

    static List<FieldDecl> getAllFields(TypeVariable on) {
        if (on.extends != null) {
            return PropTypeUtil.getAllFields(on.extends);
        }
        return List();
    }

    static MethodDecl findMethodByName(TypeVariable on, String name) {
        return null;
    }

    static Boolean isDependsOnReturn(TypeVariable on) {
        if (on.positions == null || on.positions.isEmpty) {
            return false;
        }
        return on.positions.first.type == TypeResolutionPositionType.RETURN;
    }
}