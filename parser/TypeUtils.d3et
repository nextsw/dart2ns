server class TypeUtils {

    static void forEachInvolvedType(PropType type, Consumer<PropType> consumer) {
        if(type is ParameterizedType) {
            ParameterizedType pt = type as ParameterizedType;
            PropType baseType = pt.baseType;
            consumer(baseType);
            pt.arguments.forEach((t) => forEachInvolvedType(t.type, consumer));
        } else {
            consumer(type);
        }
    }

    static Boolean isCollection(PropType type) {
        if (type == null) {
            return false;
        }
        if (type is ParameterizedType) {
            return TypeUtils.isCollection((type as ParameterizedType).baseType);
        }
        if (type.name == PropTypeUtil.LIST_TYPE || type.name == PropTypeUtil.SET_TYPE || type.name == PropTypeUtil.ITERABLE_TYPE) {
            return true;
        }
        return isCollection(type.extends);
    }

    static PropType elementType(PropType type) {
        if (TypeUtils.isCollection(type)) {
            return PropTypeUtil.getElemenetType(type);
        }
        return type;
    }

    static PropType applyArg(PropType type, PropType arg) {
        return TypeUtils.applyArgs(type, [
            arg,
        ]);
    }

    static PropType applyArgs(PropType type, List<PropType> args) {
        if (type == null) {
            return type;
        }
        if (args.isEmpty || type.typeVars.isEmpty) {
            return type;
        }
        ParameterizedType pt = ParameterizedTypeUtil.from(type);
        if (args != null) {
            args.forEach((a) => ParameterizedTypeUtil.addArgument(pt, a));
        }
        return pt;
    }

    static PropType elementTypeWithGeneric(PropType type, String genericName) {
        if (type is ParameterizedType) {
            return ParameterizedTypeUtil.elemenetType(type as ParameterizedType, genericName);
        }
        for (TypeVariable typeVar in type.typeVars) {
            if (typeVar.name == genericName) {
                return typeVar;
            }
        }
        return type;
    }

    static PropType elementTypeWithIndex(PropType type, Integer index) {
        if (type is ParameterizedType) {
            List<PropType> arguments = ParameterizedTypeUtil.getTypeArgumentsList(type as ParameterizedType);
            if (arguments.length > index) {
                return arguments.get(index);
            }
            return type;
        }
        List<TypeVariable> typeVars = type.typeVars;
        if (typeVars.length > index) {
            return typeVars.get(index);
        }
        return type;
    }

    static Boolean isTypeType(PropType type) {
        if (type == null) {
            return false;
        }
        if (type.extends != null && type.extends.name != 'Object') {
            return TypeUtils.isTypeType(type.extends);
        }
        if (type is ParameterizedType) {
            return TypeUtils.isTypeType(((type as ParameterizedType)).baseType);
        }
        return type.name == PropTypeUtil.TYPE_TYPE;
    }

    static Boolean isIntOrLong(PropType type) {
        if (type == null) {
            return false;
        }
        return type.name == PropTypeUtil.INTEGER_TYPE;
    }

    static Boolean isFloatOrDouble(PropType type) {
        if (type == null) {
            return false;
        }
        return type.name == PropTypeUtil.DOUBLE_TYPE;
    }

    static Boolean isNumber(PropType type) {
        return TypeUtils.isIntOrLong(type) || TypeUtils.isFloatOrDouble(type);
    }

    static Boolean isBool(PropType type) {
        return type.name == PropTypeUtil.BOOLEAN_TYPE;
    }

    static String listToString(List<PropType> paramTypes) {
        StringBuffer sb = StringBuffer();
        sb.write('(');
        if (paramTypes != null && !paramTypes.isEmpty) {
            sb.write(paramTypes[0]);
            for (Integer i = 1; i < paramTypes.length; i++) {
                sb.write(' ');
                sb.write(paramTypes[i]);
            }
        }
        sb.write(')');
        return sb.toString();
    }
}