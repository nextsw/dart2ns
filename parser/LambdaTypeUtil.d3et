server class LambdaTypeUtil {

    static LambdaType withMethod(MethodDecl method){
        LambdaType type = LambdaType(
            method: method,
            name: '()->',
        );
        return type;
    }

    static Boolean isAssignableFrom(LambdaType on, PropType type) {
        if (type is LambdaType) {
            MethodDecl other = ((type as LambdaType)).method;
            List<PropType> collect = other.positionalParams.map((p) => p.dataType.resolvedType).toList();
            collect.addAll(other.optionalParams.map((p) => p.dataType.resolvedType).toList());
            Map<String, PropType> namedParams = Map.fromIterable(other.optionalParams, 
                key: (f) => f.name,
                value: (f) => f.dataType.resolvedType,
            );
            return MethodUtil.isSignatureMatched(on.method, null, on, on.method.name, false, false, false, collect, namedParams, List<PropType>());
        }
        return PropTypeUtil.isAssignableFrom(on, type);
    }

    static Boolean canAssignTo(LambdaType on, PropType propType) {
        LambdaType findLambdaFunction = PropTypeUtil.findLambdaFunction(propType);
        if (findLambdaFunction == null) {
            return false;
        }
        return isAssignableFrom(findLambdaFunction, on);
    }

}