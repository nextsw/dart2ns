server class LambdaExpression extends Expression {
    List<Param> params = [];
    Expression expression;
    Block body;
    ASyncType asyncType = ASyncType.NONE;
    MethodDecl originalMethod;
    DataType returnType;
    PropType expectedType;
    LambdaExpression({this.params});


    void resolve(ResolveContext context) {
        context.scope = Scope(parent: context.scope);
        DataType type = context.expectedType;
        if(type is FunctionType) {
            FunctionType fnType = type as FunctionType;
            Integer x = 0;
            for(Param p in params){
                if(p.type == null){
                    if(x < fnType.params.length){
                        p.type = fnType.params.get(x).dataType;
                    } else {
                        p.type = ValueType('dynamic');
                    }
                }
                context.scope.add(p.name, p.type);
            }
        }
        if(expression != null) {
            expression.resolve(context);
        }
        if(body != null) {
            body.resolve(context);
        }
        List<MethodParam> mp = params.map(p => MethodParam(
            name: p.name,
            dataType: p.type,
        )).toList();
        resolvedType = FunctionType(
            returnType: body != null? ValueType('void') : expression.resolvedType,
            params: mp,
        );
        context.scope = context.scope.parent;
    }
    void collectUsedTypes(List<DataType> types) {
        for(Param p in params) {
            if(p.type != null) {
                types.add(p.type);
            }
        }
        if(expression != null){
            expression.collectUsedTypes(types);
        }
        if(body != null) {
            body.collectUsedTypes(types);
        }
    }

    void simplify(Simplifier s) {
        if(expression != null) {
            expression.simplify(s);
        }
        if(body != null) {
            body.simplify(s);
        }
    }

    void visit(ExpressionVisitor visitor) {
        visitor.visit(expression);
        visitor.visit(body);
    }
}