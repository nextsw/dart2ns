server class FieldOrEnumExpression extends Statement {
    String name;
    Expression on;
    Boolean checkNull;
    Boolean notNull;
    Boolean isGetter;
    Boolean setter;
    EvalType evalType = EvalType.ERROR;
    ClassMember resolvedMember;

    ClassDecl fieldClass;
    

    List<String> primitives = [
        'int',
        'bool',
        'double',
        'num',
    ];
    FieldOrEnumExpression({this.on, this.name, this.checkNull, this.notNull});


    void resolve(ResolveContext context) {
        ClassDecl onType = null;
        Boolean onDynamic = false;
        if(on!= null) {
            on.resolve(context);
            TopDecl decl = context.currentLib.get(on.resolvedType.name);
            if(decl is ClassDecl) {
                onType = decl as ClassDecl;
            } else if(decl is Enum) {
                Enum em = decl as Enum;
                if(name == 'index') {
                    resolvedType = context.integerType;
                    return;
                } else if (name == 'name') {
                    resolvedType = context.stringType;
                    return;
                }
            } else if(on.resolvedType == context.typeType) {
                if(!(on is FieldOrEnumExpression)){
                    context.error('Mist be FE Exp');
                    resolvedType = context.ofUnknownType();
                    return;
                }
                String typeName = (on as FieldOrEnumExpression).name;
                TopDecl top = context.currentLib.get(typeName);
                if(top is ClassDecl){
                    onType = top as ClassDecl;
                } else if(top is Enum) {
                    onType = (top as Enum).toClassDecl();
                }
                // D3ELogger.error('Resolved Type is not Class in FEExp');
            } else if(on.resolvedType == context.libraryType) {
                if(!(on is FieldOrEnumExpression)){
                    context.error('Mist be FE Exp');
                    resolvedType = context.ofUnknownType();
                    return;
                }
                String importName = (on as FieldOrEnumExpression).name;
                Library libToCheck = context.currentLib;
                TopDecl topCm = libToCheck.get(name);
                if(topCm is ClassMember) {
                    resolveUsingClassMember(context, topCm as ClassMember, onType);
                    return;
                } else {
                    resolvedType = context.typeType;
                    return;
                }
            } else if (on.resolvedType.name == 'dynamic') {
                onDynamic = true;
            }
        }
        if(name == 'this') {
            resolvedType = ValueType(context.instanceClass.name);
            return;
        } 
        if(name == 'super') {
            if(context.instanceClass.isMixin) {
                resolvedType = ValueType(context.instanceClass.name);
            } else {
                resolvedType = context.instanceClass.extendType;
            }
            return;
        } 
        DataType fieldType = context.fieldTypeFromScope(name);
        if(onDynamic) {
            resolvedType = context.objectType;
            return;
        }

        if(fieldType == null && onType != null) {
            ClassMember cm = context.getMember(onType, name);
            resolveUsingClassMember(context, cm, onType);
        } else if(fieldType != null) {
            // this must be global field
            resolvedType = fieldType;
        } else {
            if(on == null && ParserUtil.isTypeName(name) || primitives.contains(name)){
                resolvedType = context.typeType;
                return;
            } else if(context.instanceClass != null){
                ClassMember mem = context.getMember(context.instanceClass, name);
                if(mem != null){
                    resolveUsingClassMember(context, mem, context.instanceClass);
                    fieldType = resolvedType;
                }
            }
            if(fieldType == null && context.currentLib != null) {
                // Lets check if is a library import
                Library libToCheck = context.currentLib;
                Import import = libToCheck.imports.firstWhere(i => i.name == name);
                if(import != null) {
                    resolvedType = context.libraryType;
                    fieldType = resolvedType;
                    return;
                } 
                TopDecl top = libToCheck.get(name);
                if((top is FieldDecl) || (top is MethodDecl)) {
                    resolveUsingClassMember(context, top as ClassMember, null);
                    fieldType = resolvedType;
                }
            }
            if(fieldType == null) {
                String cls = context.instanceClass?.name;
                String method = context.method?.name;
                context.error('No field found: ' + name + ' in Cls: ' + cls +' Method: ' + method);
                    
                resolvedType = context.ofUnknownType();
            }
        }
    }
    void collectUsedTypes(List<DataType> types) {
        if(on != null) {
            on.collectUsedTypes(types);
        }
        types.add(resolvedType);
    }

    void resolveUsingClassMember(ResolveContext context, ClassMember cm, ClassDecl onType) {
        if(cm is MethodDecl){
            MethodDecl md = cm as MethodDecl;
            if(md.getter) {
                isGetter = true;
                if(onType != null) {
                    resolvedType = context.resolveType(onType, md.cls, md.returnType);
                } else {
                    resolvedType = md.returnType;
                }
                resolvedMember = cm;
            } else {
                resolvedType = FunctionType(
                    returnType: md.returnType,
                    params: md.allParams,
                );
                resolvedMember = cm;
            }
        } else {
            FieldDecl field = cm as FieldDecl;
            if(field != null) {
                if(field.type == null) {
                    field.resolve(context);
                }
                if(onType != null) {
                    resolvedType = context.resolveType(onType, field.cls, field.type);
                } else {
                    resolvedType = field.type;
                }
                resolvedMember = cm;
            } else {
                String cls = context.instanceClass?.name;
                String method = context.method?.name;
                String inType = onType?.name;
                context.error('No field found: ' + name + ' in ' + inType + ' Cls: ' + cls +' Method: ' + method);
                resolvedType = context.ofUnknownType();
            }
        }
    }

    String toString(){
        return (on?.toString() ?? '') + name;
    }

    void simplify(Simplifier s) {
        if(checkNull) {
            TerinaryExpression ter = TerinaryExpression(
                condition: BinaryExpression(
                    op: '==',
                    left: on,
                    right: NullExpression(),
                ),
                ifTrue: NullExpression(),
                ifFalse: FieldOrEnumExpression(
                    on: on,
                    name: name,
                ),
            );
            s.add(ter);
            s.markDelete();
        } else {
            on = s.makeSimple(on);
        }
    }

    void visit(ExpressionVisitor visitor) {
        visitor.visit(on);
    }
    
}