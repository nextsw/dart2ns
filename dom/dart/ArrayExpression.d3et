server class ArrayExpression extends Expression{
    DataType enforceType;
    DataType valueType;
    List<ArrayItem> values = [];
    ArrayType type;

    PropType elementType;

    Boolean get list {
        return type == ArrayType.List;
    }


    void resolve(ResolveContext context) {
        for(ArrayItem item in values){
            item.resolve(context);
        }
        if(enforceType != null) {
            resolvedType = enforceType;
        } else if(values.isNotEmpty){
            resolvedType = values.first.resolvedType;
        } else {
            resolvedType = ValueType('List');
        }
    }
    void collectUsedTypes(List<DataType> types) {
        for(ArrayItem item in values){
            item.collectUsedTypes(types);
        }
        if(enforceType != null) {
            types.add(enforceType);
        }
        if(valueType != null) {
            types.add(valueType);
        }
    }

    void simplify(Simplifier s) {
        for(ArrayItem item in values){
            item.simplify(s);
        }
    }
    void visit(ExpressionVisitor visitor) {
        for(ArrayItem item in values){
            visitor.visit(item);
        }
    }
}