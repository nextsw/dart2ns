server class IfStatement extends Statement {
    Expression test;
    Statement thenStatement;
    Statement elseStatement;
    IfStatement({this.test, this.thenStatement, this.elseStatement});


    void resolve(ResolveContext context) {
        Map<String, String> typeChecks = Map();
        test.getTypeChecks(typeChecks);
        test.resolve(context);
        
        if(typeChecks.isNotEmpty) {
            context.scope = Scope(parent: context.scope);
            typeChecks.forEach((k,v){
                context.scope.add(k, ValueType(v));
            });
        }

        thenStatement.resolve(context);
        if(typeChecks.isNotEmpty){
            context.scope = context.scope.parent;
        }
        if(elseStatement != null) {
            elseStatement.resolve(context);
        }
    }
    void collectUsedTypes(List<DataType> types) {
        test.collectUsedTypes(types);
        thenStatement.collectUsedTypes(types);
        if(elseStatement != null){
            elseStatement.collectUsedTypes(types);
        }
    }

    void simplify(Simplifier s) {
        test = s.makeSimple(test);
        thenStatement.simplify(s);
        if(elseStatement != null) {
            elseStatement.simplify(s);
        }
    }

    void visit(ExpressionVisitor visitor) {
        visitor.visit(test);
        visitor.visit(thenStatement);
        visitor.visit(elseStatement);
    }
}