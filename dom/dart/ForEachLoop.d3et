server class ForEachLoop extends Statement {
    Expression body;
    DataType dataType;
    String name;
    Expression collection;
    ForEachLoop({this.body, this.dataType, this.name, this.collection});


    void resolve(ResolveContext context) {
        collection.resolve(context);
        if(dataType == null || dataType.name =='var') {
            dataType = context.subType(collection.resolvedType);
        }
        context.scope.add(name, dataType);
        if(body != null) {
            body.resolve(context);
        }
    }
    void collectUsedTypes(List<DataType> types) {
        if(dataType != null){
            types.add(dataType);
        }
        if(body != null) {
            body.collectUsedTypes(types);
        }
        collection.collectUsedTypes(types);
    }

    void simplify(Simplifier s) {
        collection = s.makeSimple(collection);
        if(body == null){
            body = Block();
        }
        if(!(body is Block)){
            Block b = Block();
            b.statements.add(body as Statement);
            body = b;
        }
        body.simplify(s);
    }

    void visit(ExpressionVisitor visitor) {
        visitor.visit(collection);
        visitor.visit(body);
    }
}