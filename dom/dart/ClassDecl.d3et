server class ClassDecl extends TopDecl {
    Boolean isAbstract;
    TypeParams generics;
    DataType extendType;
    List<DataType> impls = [];
    List<ClassMember> members = [];
    List<DataType> mixins = [];
    List<DataType> ons = [];
    Boolean isMixin;
    DataType mixinApplicationType;
    String _packagePath;
    ClassDecl(this.isMixin, String name) : super(name, TopDeclType.Class, '');

    void collectUsedTypes(){
        usedTypes.addAll(impls);
        if(extendType != null) {
            usedTypes.add(extendType);
        }
        for(ClassMember cm in members) {
            if(cm is FieldDecl) {
                FieldDecl fd = cm as FieldDecl;
                if(fd.type != null) {
                    usedTypes.add(fd.type);
                }
            } else if (cm is MethodDecl) {
                MethodDecl md = cm as MethodDecl;
                if(md.returnType != null) {
                    usedTypes.add(md.returnType);
                }
                for(MethodParam m in md.params) {
                    if(m.dataType != null) {
                        usedTypes.add(m.dataType);
                    }
                }
            }
        }
    }

    void resolveFields(ResolveContext context){
        for(ClassMember cm in members){
            cm.cls = this;
        }
        D3ELogger.info('Resolving Class: ' + name);
        context.instanceClass = this;
        context.scope = Scope(parent: context.scope);
        for(ClassMember cm in members.where(m => m is FieldDecl)){
            (cm as FieldDecl).resolve(context);
        }
        context.scope = context.scope.parent;
        context.instanceClass = null;
    }
    void resolveMethods(ResolveContext context){
        D3ELogger.info('Resolving Class: ' + name);
        context.instanceClass = this;
        context.scope = Scope(parent: context.scope);
        for(ClassMember cm in members.where(m => m is MethodDecl)){
            (cm as MethodDecl).resolve(context);
        }
        context.scope = context.scope.parent;
        context.instanceClass = null;
    }

    void simplify(Simplifier s){
        for(ClassMember cm in members){
            cm.simplify(s);
        }
    }

    String get packagePath {
        if(_packagePath != null){
            return _packagePath;
        }
        String outPath = lib.packagePath;
        List<String> split = outPath.split('/');
        split.removeLast();
        split.add(name);
        _packagePath = split.join('/');
        return _packagePath;
    }

    String toString(){
        return name;
    }
} 