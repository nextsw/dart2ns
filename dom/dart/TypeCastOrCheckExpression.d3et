server class TypeCastOrCheckExpression extends Statement {
    Boolean check;
    DataType dataType;
    Expression exp;
    Boolean isNot;
    TypeCastOrCheckExpression({this.check, this.dataType, this.exp, this.isNot});


    void resolve(ResolveContext context) {
        exp.resolve(context);
        if(check) {
            resolvedType = context.booleanType;
        } else {
            resolvedType = dataType;
        }
    }
    void collectUsedTypes(List<DataType> types) {
        exp.collectUsedTypes(types);
        types.add(dataType);
    }

    void simplify(Simplifier s) {
        exp = s.makeSimple(exp);
    }

    void visit(ExpressionVisitor visitor) {
        visitor.visit(exp);
    }

    void getTypeChecks(Map<String, String> checks){
        if(check){
            if(exp is FieldOrEnumExpression){
                FieldOrEnumExpression fe = exp as FieldOrEnumExpression;
                if(fe.on == null) {
                    checks.set(fe.name, dataType.name);
                }
            }
        }
    }
}