server class FunctionType extends DataType{
    DataType returnType;
    List<MethodParam> params = [];
    List<DataType> typeArgs = [];
    MethodDecl method;
    FunctionType({this.returnType, this.params, this.optional, this.typeArgs});
    String signature;
    String toString(){
        String res = returnType != null ? returnType.toString() : 'void';
        if(this.typeArgs.isNotEmpty) {
            res = res + '<' + this.typeArgs.toString() +'>';
        }
        if(params != null) {
            res = res + params.toString();
        } else {
            res = res + '()';
        }
        return res;
    }

    void collectUsedTypes(Set<String> types) {
        if(returnType != null) {
            returnType.collectUsedTypes(types);
        }
        if(params != null) {
            for(MethodParam m in params){
                m.dataType.collectUsedTypes(types);
            }
        }
    }

    String computeSignature() {
        StringBuffer sb = StringBuffer();
        sb.write('__fn_');
        if(params != null) {
            for(MethodParam m in params){
                if(m.dataType.name == null || m.dataType.name.length == 1) {
                    sb.write('Object');
                } else {
                    sb.write(m.dataType.name);
                }
                sb.write('_');
            }
        }
        if(returnType != null && returnType.name != null) {
            if(returnType.name.length == 1) {
                sb.write('Object');
            } else {
                sb.write(returnType.name);
            }
        } else {
            sb.write('void');
        }
        return sb.toString();
    }

    PropType type(ValidationContext ctx){
        // FIXME
        return null;
    }

    PropType rawType(ValidationContext ctx){
        // FIXME
        return null;
    }

    List<DataType> get typeArguments {
        return [];
    }
}