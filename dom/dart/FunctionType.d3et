server class FunctionType extends DataType{
    DataType returnType;
    MethodParams params;
    List<DataType> typeArgs = [];
    FunctionType({this.returnType, this.params, this.optional, this.typeArgs});
    String toString(){
        String res = returnType != null ? returnType.toString() : 'void';
        if(this.typeArgs.isNotEmpty) {
            res = res + '<' + this.typeArgs.toString() +'>';
        }
        if(params != null) {
            res = res + params.toString();
        } else {
            res = res + '()';
        }
        return res;
    }

    void collectUsedTypes(Set<String> types) {
        if(returnType != null) {
            returnType.collectUsedTypes(types);
        }
        if(params != null) {
            for(MethodParam m in params.positionalParams){
                m.dataType.collectUsedTypes(types);
            }
            for(MethodParam m in params.optionalParams){
                m.dataType.collectUsedTypes(types);
            }
            for(MethodParam m in params.namedParams){
                m.dataType.collectUsedTypes(types);
            }
        }
    }
}